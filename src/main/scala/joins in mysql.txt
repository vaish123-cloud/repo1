1.	List all employees and their department names, but only include employees assigned to a department.
2.	Find employees whose department name starts with the letter 'F'.
3.	Retrieve employee details along with the department name for departments with IDs greater than 102
4.	Find employees working in the 'IT' or 'Marketing' departments.
5.	List department names and the total number of employees in each department. (Hint: Use GROUP BY with INNER JOIN)
7.	Find employees not assigned to any department
9.List employees along with department details for those working in departments with IDs less than 104.
	10. Find employees with names starting with 'V' and their corresponding departments (if available).

Table: employees
CREATE TABLE employees (
    emp_id INT PRIMARY KEY,
    name VARCHAR(50),
    department_id INT
);

INSERT INTO employees VALUES
(1, 'Karthik', 101),
(2, 'Veena', 102),
(3, 'Meena', NULL),
(4, 'Veer', 103),
(5, 'Ajay', 104),
(6, 'Vijay', NULL),
(7, 'Keerthi', 105);

Table: departments
CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(50)
);

INSERT INTO departments VALUES
(101, 'HR'),
(102, 'Finance'),
(103, 'IT'),
(104, 'Marketing'),
(106, 'Operations');

12.	Find departments without any employees assigned to them.
13.	Fetch the names of all departments along with employee names, where department names contain the letter 'O'.
14.	Retrieve department details along with employees whose names end with 'a'.
15.	List all departments with fewer than two employees.


17.	Find all departments and employees where there is no match between the two tables.
18.	Fetch details of all employees and departments, showing 'No Department' for missing department details and 'No Employee' for missing employee details.
List employees and departments, ensuring departments with names ending in 's' are included even if no employees are assigned.


Three tables joins:
List all employees and their departments, including employees without a department or salary.


1. employees Table

CREATE TABLE employees (
    emp_id INT AUTO_INCREMENT PRIMARY KEY,
    emp_name VARCHAR(100),
    department_id INT
);

INSERT INTO employees (emp_name, department_id) VALUES
('Karthik', 1),
('Veer', 2),
('Veena', 3),
('Meera', 1),
('Pratik', NULL);

2. departments Table
CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(100)
);

INSERT INTO departments (department_id, department_name) VALUES
(1, 'HR'),
(2, 'IT'),
(3, 'Finance'),
(4, 'Marketing');



3. salaries Table
CREATE TABLE salaries (
    emp_id INT,
    salary DECIMAL(10, 2),
    pay_date DATE,
    PRIMARY KEY (emp_id, pay_date)
);

INSERT INTO salaries (emp_id, salary, pay_date) VALUES
(1, 50000, '2024-12-01'),
(2, 60000, '2024-12-01'),
(3, 55000, '2024-12-01'),
(1, 52000, '2024-12-15'),
(2, 62000, '2024-12-15');

For each employee in the IT department, find their salary rank and the salary rank of the next employee in the department.
-- If two employees have the same salary, they should receive the same rank. Use LEAD, LAG, and CASE WHEN to calculate the rank.

Retrieve employee names, department names, and salaries paid on 2024-12-01.
Find employees who havenâ€™t received any salary.
List all employees and their departments, including employees without a department or salary.
